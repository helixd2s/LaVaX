#pragma once

// Exclude rarely-used stuff from Windows headers
#define WIN32_LEAN_AND_MEAN

// For Wrapper Need ONLY Vulkan API Headers
#include <vkh/core.hpp>
#include <vkh/bitfields.hpp>
#include <vkh/enums.hpp>
#include <vkh/structures.hpp>
#include <vkh/matching.hpp>
#include <vector>
#include <memory>
#include <array>

//*********************************************************
//
// Copyright (c) Microsoft. All rights reserved.
// This code is licensed under the MIT License (MIT).
// THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
// ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
// IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
// PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************

// Windows Header Files
#include <stdexcept>
#include <windows.h>
#include <d3d12.h>
#include <dxgi1_6.h>
#include <wrl.h>
#include <D3DX12/d3dx12.h>

// Note that while ComPtr is used to manage the lifetime of resources on the CPU,
// it has no understanding of the lifetime of resources on the GPU. Apps must account
// for the GPU lifetime of resources to avoid destroying objects that may still be
// referenced by the GPU.
using Microsoft::WRL::ComPtr;

inline std::string HrToString(HRESULT hr)
{
    char s_str[64] = {};
    sprintf_s(s_str, "HRESULT of 0x%08X", static_cast<UINT>(hr));
    return std::string(s_str);
}

class HrException : public std::runtime_error
{
public:
    HrException(HRESULT hr) : std::runtime_error(HrToString(hr)), m_hr(hr) {}
    HRESULT Error() const { return m_hr; }
private:
    const HRESULT m_hr;
};

#define SAFE_RELEASE(p) if (p) (p)->Release()

inline void ThrowIfFailed(HRESULT hr)
{
    if (FAILED(hr))
    {
        throw HrException(hr);
    }
}

inline void GetAssetsPath(_Out_writes_(pathSize) WCHAR* path, UINT pathSize)
{
    if (path == nullptr)
    {
        throw std::exception();
    }

    DWORD size = GetModuleFileName(nullptr, path, pathSize);
    if (size == 0 || size == pathSize)
    {
        // Method failed or path was truncated.
        throw std::exception();
    }

    WCHAR* lastSlash = wcsrchr(path, L'\\');
    if (lastSlash)
    {
        *(lastSlash + 1) = L'\0';
    }
}

inline HRESULT ReadDataFromFile(LPCWSTR filename, int8_t** data, UINT* size)
{
    using namespace Microsoft::WRL;

    CREATEFILE2_EXTENDED_PARAMETERS extendedParams = {};
    extendedParams.dwSize = sizeof(CREATEFILE2_EXTENDED_PARAMETERS);
    extendedParams.dwFileAttributes = FILE_ATTRIBUTE_NORMAL;
    extendedParams.dwFileFlags = FILE_FLAG_SEQUENTIAL_SCAN;
    extendedParams.dwSecurityQosFlags = SECURITY_ANONYMOUS;
    extendedParams.lpSecurityAttributes = nullptr;
    extendedParams.hTemplateFile = nullptr;

    Wrappers::FileHandle file(CreateFile2(filename, GENERIC_READ, FILE_SHARE_READ, OPEN_EXISTING, &extendedParams));
    if (file.Get() == INVALID_HANDLE_VALUE)
    {
        throw std::exception();
    }

    FILE_STANDARD_INFO fileInfo = {};
    if (!GetFileInformationByHandleEx(file.Get(), FileStandardInfo, &fileInfo, sizeof(fileInfo)))
    {
        throw std::exception();
    }

    if (fileInfo.EndOfFile.HighPart != 0)
    {
        throw std::exception();
    }

    *data = reinterpret_cast<int8_t*>(malloc(fileInfo.EndOfFile.LowPart));
    *size = fileInfo.EndOfFile.LowPart;

    if (!ReadFile(file.Get(), *data, fileInfo.EndOfFile.LowPart, nullptr, nullptr))
    {
        throw std::exception();
    }

    return S_OK;
}

// Assign a name to the object to aid with debugging.
#if defined(_DEBUG) || defined(DBG)
inline void SetName(ID3D12Object* pObject, LPCWSTR name)
{
    pObject->SetName(name);
}
inline void SetNameIndexed(ID3D12Object* pObject, LPCWSTR name, UINT index)
{
    WCHAR fullName[50];
    if (swprintf_s(fullName, L"%s[%u]", name, index) > 0)
    {
        pObject->SetName(fullName);
    }
}
#else
inline void SetName(ID3D12Object*, LPCWSTR)
{
}
inline void SetNameIndexed(ID3D12Object*, LPCWSTR, UINT)
{
}
#endif

// Naming helper for ComPtr<T>.
// Assigns the name of the variable as the name of the object.
// The indexed variant will include the index in the name of the object.
#define NAME_D3D12_OBJECT(x) SetName((x).Get(), L#x)
#define NAME_D3D12_OBJECT_INDEXED(x, n) SetNameIndexed((x)[n].Get(), L#x, n)

inline UINT CalculateConstantBufferByteSize(UINT byteSize)
{
    // Constant buffer size is required to be aligned.
    return (byteSize + (D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT - 1)) & ~(D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT - 1);
}

#ifdef D3D_COMPILE_STANDARD_FILE_INCLUDE
inline Microsoft::WRL::ComPtr<ID3DBlob> CompileShader(
    const std::wstring& filename,
    const D3D_SHADER_MACRO* defines,
    const std::string& entrypoint,
    const std::string& target)
{
    UINT compileFlags = 0;
#if defined(_DEBUG) || defined(DBG)
    compileFlags = D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION;
#endif

    HRESULT hr;

    Microsoft::WRL::ComPtr<ID3DBlob> byteCode = nullptr;
    Microsoft::WRL::ComPtr<ID3DBlob> errors;
    hr = D3DCompileFromFile(filename.c_str(), defines, D3D_COMPILE_STANDARD_FILE_INCLUDE,
        entrypoint.c_str(), target.c_str(), compileFlags, 0, &byteCode, &errors);

    if (errors != nullptr)
    {
        OutputDebugStringA((char*)errors->GetBufferPointer());
    }
    ThrowIfFailed(hr);

    return byteCode;
}
#endif

// Resets all elements in a ComPtr array.
template<class T>
void ResetComPtrArray(T* comPtrArray)
{
    for (auto& i : *comPtrArray)
    {
        i.Reset();
    }
}


// Resets all elements in a unique_ptr array.
template<class T>
void ResetUniquePtrArray(T* uniquePtrArray)
{
    for (auto& i : *uniquePtrArray)
    {
        i.reset();
    }
}

//
//
//

// 
inline static const auto VK_FORMAT_RANGE_SIZE = (VK_FORMAT_ASTC_12x12_SRGB_BLOCK - VK_FORMAT_UNDEFINED + 1);

// 
struct format_block_t {
    uint8_t width;
    uint8_t height;
    uint16_t bits;
};


// TODO
static inline const std::array<DXGI_FORMAT, VK_FORMAT_RANGE_SIZE> formats{
    DXGI_FORMAT_UNKNOWN, // UNDEFINED
    DXGI_FORMAT_UNKNOWN, // R4G4_UNORM_PACK8
    DXGI_FORMAT_UNKNOWN, // R4G4B4A4_UNORM_PACK16
    DXGI_FORMAT_UNKNOWN, // B4G4R4A4_UNORM_PACK16
    DXGI_FORMAT_UNKNOWN, // R5G6B5_UNORM_PACK16
    DXGI_FORMAT_UNKNOWN, // B5G6R5_UNORM_PACK16
    DXGI_FORMAT_UNKNOWN, // R5G5B5A1_UNORM_PACK16
    DXGI_FORMAT_UNKNOWN, // B5G5R5A1_UNORM_PACK16
    DXGI_FORMAT_UNKNOWN, // A1R5G5B5_UNORM_PACK16
    DXGI_FORMAT_R8_UNORM, // R8_UNORM
    DXGI_FORMAT_R8_SNORM, // R8_SNORM
    DXGI_FORMAT_UNKNOWN, // R8_USCALED
    DXGI_FORMAT_UNKNOWN, // R8_SSCALED
    DXGI_FORMAT_R8_UINT, // R8_UINT
    DXGI_FORMAT_R8_SINT, // R8_SINT
    DXGI_FORMAT_UNKNOWN, // R8_SRGB
    DXGI_FORMAT_R8G8_UNORM, // R8G8_UNORM
    DXGI_FORMAT_R8G8_SNORM, // R8G8_SNORM
    DXGI_FORMAT_UNKNOWN, // R8G8_USCALED
    DXGI_FORMAT_UNKNOWN, // R8G8_SSCALED
    DXGI_FORMAT_R8G8_UINT, // R8G8_UINT
    DXGI_FORMAT_R8G8_SINT, // R8G8_SINT
    DXGI_FORMAT_UNKNOWN, // R8G8_SRGB
    DXGI_FORMAT_UNKNOWN, // R8G8B8_UNORM
    DXGI_FORMAT_UNKNOWN, // R8G8B8_SNORM
    DXGI_FORMAT_UNKNOWN, // R8G8B8_USCALED
    DXGI_FORMAT_UNKNOWN, // R8G8B8_SSCALED
    DXGI_FORMAT_UNKNOWN, // R8G8B8_UINT
    DXGI_FORMAT_UNKNOWN, // R8G8B8_SINT
    DXGI_FORMAT_UNKNOWN, // R8G8B8_SRGB
    DXGI_FORMAT_UNKNOWN, // B8G8R8_UNORM
    DXGI_FORMAT_UNKNOWN, // B8G8R8_SNORM
    DXGI_FORMAT_UNKNOWN, // B8G8R8_USCALED
    DXGI_FORMAT_UNKNOWN, // B8G8R8_SSCALED
    DXGI_FORMAT_UNKNOWN, // B8G8R8_UINT
    DXGI_FORMAT_UNKNOWN, // B8G8R8_SINT
    DXGI_FORMAT_UNKNOWN, // B8G8R8_SRGB
    DXGI_FORMAT_R8G8B8A8_UNORM, // R8G8B8A8_UNORM
    DXGI_FORMAT_R8G8B8A8_SNORM, // R8G8B8A8_SNORM
    DXGI_FORMAT_UNKNOWN, // R8G8B8A8_USCALED
    DXGI_FORMAT_UNKNOWN, // R8G8B8A8_SSCALED
    DXGI_FORMAT_R8G8B8A8_UINT, // R8G8B8A8_UINT
    DXGI_FORMAT_R8G8B8A8_SINT, // R8G8B8A8_SINT
    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB, // R8G8B8A8_SRGB
    DXGI_FORMAT_B8G8R8A8_UNORM, // B8G8R8A8_UNORM
    DXGI_FORMAT_UNKNOWN, // B8G8R8A8_SNORM
    DXGI_FORMAT_UNKNOWN, // B8G8R8A8_USCALED
    DXGI_FORMAT_UNKNOWN, // B8G8R8A8_SSCALED
    DXGI_FORMAT_UNKNOWN, // B8G8R8A8_UINT
    DXGI_FORMAT_UNKNOWN, // B8G8R8A8_SINT
    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB, // B8G8R8A8_SRGB
    DXGI_FORMAT_UNKNOWN, // A8B8G8R8_UNORM_PACK32
    DXGI_FORMAT_UNKNOWN, // A8B8G8R8_SNORM_PACK32
    DXGI_FORMAT_UNKNOWN, // A8B8G8R8_USCALED_PACK32
    DXGI_FORMAT_UNKNOWN, // A8B8G8R8_SSCALED_PACK32
    DXGI_FORMAT_UNKNOWN, // A8B8G8R8_UINT_PACK32
    DXGI_FORMAT_UNKNOWN, // A8B8G8R8_SINT_PACK32
    DXGI_FORMAT_UNKNOWN, // A8B8G8R8_SRGB_PACK32
    DXGI_FORMAT_UNKNOWN, // A2R10G10B10_UNORM_PACK32
    DXGI_FORMAT_UNKNOWN, // A2R10G10B10_SNORM_PACK32
    DXGI_FORMAT_UNKNOWN, // A2R10G10B10_USCALED_PACK32
    DXGI_FORMAT_UNKNOWN, // A2R10G10B10_SSCALED_PACK32
    DXGI_FORMAT_UNKNOWN, // A2R10G10B10_UINT_PACK32
    DXGI_FORMAT_UNKNOWN, // A2R10G10B10_SINT_PACK32
    DXGI_FORMAT_UNKNOWN, // A2B10G10R10_UNORM_PACK32
    DXGI_FORMAT_UNKNOWN, // A2B10G10R10_SNORM_PACK32
    DXGI_FORMAT_UNKNOWN, // A2B10G10R10_USCALED_PACK32
    DXGI_FORMAT_UNKNOWN, // A2B10G10R10_SSCALED_PACK32
    DXGI_FORMAT_UNKNOWN, // A2B10G10R10_UINT_PACK32
    DXGI_FORMAT_UNKNOWN, // A2B10G10R10_SINT_PACK32
    DXGI_FORMAT_UNKNOWN, // R16_UNORM
    DXGI_FORMAT_UNKNOWN, // R16_SNORM
    DXGI_FORMAT_UNKNOWN, // R16_USCALED
    DXGI_FORMAT_UNKNOWN, // R16_SSCALED
    DXGI_FORMAT_UNKNOWN, // R16_UINT
    DXGI_FORMAT_UNKNOWN, // R16_SINT
    DXGI_FORMAT_UNKNOWN, // R16_SFLOAT
    DXGI_FORMAT_UNKNOWN, // R16G16_UNORM
    DXGI_FORMAT_UNKNOWN, // R16G16_SNORM
    DXGI_FORMAT_UNKNOWN, // R16G16_USCALED
    DXGI_FORMAT_UNKNOWN, // R16G16_SSCALED
    DXGI_FORMAT_UNKNOWN, // R16G16_UINT
    DXGI_FORMAT_UNKNOWN, // R16G16_SINT
    DXGI_FORMAT_R16G16_FLOAT, // R16G16_SFLOAT
    DXGI_FORMAT_UNKNOWN, // R16G16B16_UNORM
    DXGI_FORMAT_UNKNOWN, // R16G16B16_SNORM
    DXGI_FORMAT_UNKNOWN, // R16G16B16_USCALED
    DXGI_FORMAT_UNKNOWN, // R16G16B16_SSCALED
    DXGI_FORMAT_UNKNOWN, // R16G16B16_UINT
    DXGI_FORMAT_UNKNOWN, // R16G16B16_SINT
    DXGI_FORMAT_UNKNOWN, // R16G16B16_SFLOAT
    DXGI_FORMAT_R16G16B16A16_UNORM, // R16G16B16A16_UNORM
    DXGI_FORMAT_R16G16B16A16_SNORM, // R16G16B16A16_SNORM
    DXGI_FORMAT_UNKNOWN, // R16G16B16A16_USCALED
    DXGI_FORMAT_UNKNOWN, // R16G16B16A16_SSCALED
    DXGI_FORMAT_R16G16B16A16_UINT, // R16G16B16A16_UINT
    DXGI_FORMAT_R16G16B16A16_SINT, // R16G16B16A16_SINT
    DXGI_FORMAT_R16G16B16A16_FLOAT, // R16G16B16A16_SFLOAT
    DXGI_FORMAT_R32_UINT, // R32_UINT
    DXGI_FORMAT_R32_SINT, // R32_SINT
    DXGI_FORMAT_R32_FLOAT, // R32_SFLOAT
    DXGI_FORMAT_R32G32_UINT, // R32G32_UINT
    DXGI_FORMAT_R32G32_SINT, // R32G32_SINT
    DXGI_FORMAT_R32G32_FLOAT, // R32G32_SFLOAT
    DXGI_FORMAT_R32G32B32_UINT, // R32G32B32_UINT
    DXGI_FORMAT_R32G32B32_SINT, // R32G32B32_SINT
    DXGI_FORMAT_R32G32B32_FLOAT, // R32G32B32_SFLOAT
    DXGI_FORMAT_R32G32B32A32_UINT, // R32G32B32A32_UINT
    DXGI_FORMAT_R32G32B32A32_SINT, // R32G32B32A32_SINT
    DXGI_FORMAT_R32G32B32A32_FLOAT, // R32G32B32A32_SFLOAT
    DXGI_FORMAT_UNKNOWN, // R64_UINT
    DXGI_FORMAT_UNKNOWN, // R64_SINT
    DXGI_FORMAT_UNKNOWN, // R64_SFLOAT
    DXGI_FORMAT_UNKNOWN, // R64G64_UINT
    DXGI_FORMAT_UNKNOWN, // R64G64_SINT
    DXGI_FORMAT_UNKNOWN, // R64G64_SFLOAT
    DXGI_FORMAT_UNKNOWN, // R64G64B64_UINT
    DXGI_FORMAT_UNKNOWN, // R64G64B64_SINT
    DXGI_FORMAT_UNKNOWN, // R64G64B64_SFLOAT
    DXGI_FORMAT_UNKNOWN, // R64G64B64A64_UINT
    DXGI_FORMAT_UNKNOWN, // R64G64B64A64_SINT
    DXGI_FORMAT_UNKNOWN, // R64G64B64A64_SFLOAT
    DXGI_FORMAT_UNKNOWN, // B10G11R11_UFLOAT_PACK32
    DXGI_FORMAT_UNKNOWN, // E5B9G9R9_UFLOAT_PACK32
    DXGI_FORMAT_D16_UNORM, // D16_UNORM
    DXGI_FORMAT_UNKNOWN, // X8_D24_UNORM_PACK32
    DXGI_FORMAT_D32_FLOAT, // D32_SFLOAT
    DXGI_FORMAT_UNKNOWN, // S8_UINT
    DXGI_FORMAT_UNKNOWN, // D16_UNORM_S8_UINT
    DXGI_FORMAT_D24_UNORM_S8_UINT, // D24_UNORM_S8_UINT
    DXGI_FORMAT_D32_FLOAT_S8X24_UINT, // D32_SFLOAT_S8_UINT
    DXGI_FORMAT_BC1_UNORM, // BC1_RGB_UNORM_BLOCK
    DXGI_FORMAT_BC1_UNORM_SRGB, // BC1_RGB_SRGB_BLOCK
    DXGI_FORMAT_BC1_UNORM, // BC1_RGBA_UNORM_BLOCK
    DXGI_FORMAT_BC1_UNORM_SRGB, // BC1_RGBA_SRGB_BLOCK
    DXGI_FORMAT_BC2_UNORM, // BC2_UNORM_BLOCK
    DXGI_FORMAT_BC2_UNORM_SRGB, // BC2_SRGB_BLOCK
    DXGI_FORMAT_BC3_UNORM, // BC3_UNORM_BLOCK
    DXGI_FORMAT_BC3_UNORM_SRGB, // BC3_SRGB_BLOCK
    DXGI_FORMAT_BC4_UNORM, // BC4_UNORM_BLOCK
    DXGI_FORMAT_BC4_SNORM, // BC4_SNORM_BLOCK
    DXGI_FORMAT_BC5_UNORM, // BC5_UNORM_BLOCK
    DXGI_FORMAT_BC5_SNORM, // BC5_SNORM_BLOCK
    DXGI_FORMAT_BC6H_UF16, // BC6H_UFLOAT_BLOCK
    DXGI_FORMAT_BC6H_SF16, // BC6H_SFLOAT_BLOCK
    DXGI_FORMAT_BC7_UNORM, // BC7_UNORM_BLOCK
    DXGI_FORMAT_BC7_UNORM_SRGB, // BC7_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ETC2_R8G8B8_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ETC2_R8G8B8_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ETC2_R8G8B8A1_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ETC2_R8G8B8A1_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ETC2_R8G8B8A8_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ETC2_R8G8B8A8_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // EAC_R11_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // EAC_R11_SNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // EAC_R11G11_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // EAC_R11G11_SNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_4x4_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_4x4_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_5x4_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_5x4_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_5x5_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_5x5_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_6x5_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_6x5_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_6x6_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_6x6_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_8x5_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_8x5_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_8x6_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_8x6_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_8x8_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_8x8_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_10x5_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_10x5_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_10x6_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_10x6_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_10x8_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_10x8_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_10x10_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_10x10_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_12x10_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_12x10_SRGB_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_12x12_UNORM_BLOCK
    DXGI_FORMAT_UNKNOWN, // ASTC_12x12_SRGB_BLOCK
};

static inline const std::array<format_block_t, VK_FORMAT_RANGE_SIZE> formats_block{ {
    { 0, 0, 0 }, // UNDEFINED
    { }, // R4G4_UNORM_PACK8
    { }, // R4G4B4A4_UNORM_PACK16
    { }, // B4G4R4A4_UNORM_PACK16
    { }, // R5G6B5_UNORM_PACK16
    { }, // B5G6R5_UNORM_PACK16
    { }, // R5G5B5A1_UNORM_PACK16
    { }, // B5G5R5A1_UNORM_PACK16
    { }, // A1R5G5B5_UNORM_PACK16
    { 1, 1, 8 }, // R8_UNORM
    { 1, 1, 8 }, // R8_SNORM
    { 1, 1, 8 }, // R8_USCALED
    { 1, 1, 8 }, // R8_SSCALED
    { 1, 1, 8 }, // R8_UINT
    { 1, 1, 8 }, // R8_SINT
    { 1, 1, 8 }, // R8_SRGB
    { 1, 1, 16 }, // R8G8_UNORM
    { 1, 1, 16 }, // R8G8_SNORM
    { 1, 1, 16 }, // R8G8_USCALED
    { 1, 1, 16 }, // R8G8_SSCALED
    { 1, 1, 16 }, // R8G8_UINT
    { 1, 1, 16 }, // R8G8_SINT
    { 1, 1, 16 }, // R8G8_SRGB
    { 1, 1, 24 }, // R8G8B8_UNORM
    { 1, 1, 24 }, // R8G8B8_SNORM
    { 1, 1, 24 }, // R8G8B8_USCALED
    { 1, 1, 24 }, // R8G8B8_SSCALED
    { 1, 1, 24 }, // R8G8B8_UINT
    { 1, 1, 24 }, // R8G8B8_SINT
    { 1, 1, 24 }, // R8G8B8_SRGB
    { 1, 1, 24 }, // B8G8R8_UNORM
    { 1, 1, 24 }, // B8G8R8_SNORM
    { 1, 1, 24 }, // B8G8R8_USCALED
    { 1, 1, 24 }, // B8G8R8_SSCALED
    { 1, 1, 24 }, // B8G8R8_UINT
    { 1, 1, 24 }, // B8G8R8_SINT
    { 1, 1, 24 }, // B8G8R8_SRGB
    { 1, 1, 32 }, // R8G8B8A8_UNORM
    { 1, 1, 32 }, // R8G8B8A8_SNORM
    { 1, 1, 32 }, // R8G8B8A8_USCALED
    { 1, 1, 32 }, // R8G8B8A8_SSCALED
    { 1, 1, 32 }, // R8G8B8A8_UINT
    { 1, 1, 32 }, // R8G8B8A8_SINT
    { 1, 1, 32 }, // R8G8B8A8_SRGB
    { 1, 1, 32 }, // B8G8R8A8_UNORM
    { 1, 1, 32 }, // B8G8R8A8_SNORM
    { 1, 1, 32 }, // B8G8R8A8_USCALED
    { 1, 1, 32 }, // B8G8R8A8_SSCALED
    { 1, 1, 32 }, // B8G8R8A8_UINT
    { 1, 1, 32 }, // B8G8R8A8_SINT
    { 1, 1, 32 }, // B8G8R8A8_SRGB
    { 1, 1, 32 }, // A8B8G8R8_UNORM_PACK32
    { 1, 1, 32 }, // A8B8G8R8_SNORM_PACK32
    { 1, 1, 32 }, // A8B8G8R8_USCALED_PACK32
    { 1, 1, 32 }, // A8B8G8R8_SSCALED_PACK32
    { 1, 1, 32 }, // A8B8G8R8_UINT_PACK32
    { 1, 1, 32 }, // A8B8G8R8_SINT_PACK32
    { 1, 1, 32 }, // A8B8G8R8_SRGB_PACK32
    { 1, 1, 32 }, // A2R10G10B10_UNORM_PACK32
    { 1, 1, 32 }, // A2R10G10B10_SNORM_PACK32
    { 1, 1, 32 }, // A2R10G10B10_USCALED_PACK32
    { 1, 1, 32 }, // A2R10G10B10_SSCALED_PACK32
    { 1, 1, 32 }, // A2R10G10B10_UINT_PACK32
    { 1, 1, 32 }, // A2R10G10B10_SINT_PACK32
    { 1, 1, 32 }, // A2B10G10R10_UNORM_PACK32
    { 1, 1, 32 }, // A2B10G10R10_SNORM_PACK32
    { 1, 1, 32 }, // A2B10G10R10_USCALED_PACK32
    { 1, 1, 32 }, // A2B10G10R10_SSCALED_PACK32
    { 1, 1, 32 }, // A2B10G10R10_UINT_PACK32
    { 1, 1, 32 }, // A2B10G10R10_SINT_PACK32
    { 1, 1, 16 }, // R16_UNORM
    { 1, 1, 16 }, // R16_SNORM
    { 1, 1, 16 }, // R16_USCALED
    { 1, 1, 16 }, // R16_SSCALED
    { 1, 1, 16 }, // R16_UINT
    { 1, 1, 16 }, // R16_SINT
    { 1, 1, 16 }, // R16_SFLOAT
    { 1, 1, 32 }, // R16G16_UNORM
    { 1, 1, 32 }, // R16G16_SNORM
    { 1, 1, 32 }, // R16G16_USCALED
    { 1, 1, 32 }, // R16G16_SSCALED
    { 1, 1, 32 }, // R16G16_UINT
    { 1, 1, 32 }, // R16G16_SINT
    { 1, 1, 32 }, // R16G16_SFLOAT
    { 1, 1, 48 }, // R16G16B16_UNORM
    { 1, 1, 48 }, // R16G16B16_SNORM
    { 1, 1, 48 }, // R16G16B16_USCALED
    { 1, 1, 48 }, // R16G16B16_SSCALED
    { 1, 1, 48 }, // R16G16B16_UINT
    { 1, 1, 48 }, // R16G16B16_SINT
    { 1, 1, 48 }, // R16G16B16_SFLOAT
    { 1, 1, 64 }, // R16G16B16A16_UNORM
    { 1, 1, 64 }, // R16G16B16A16_SNORM
    { 1, 1, 64 }, // R16G16B16A16_USCALED
    { 1, 1, 64 }, // R16G16B16A16_SSCALED
    { 1, 1, 64 }, // R16G16B16A16_UINT
    { 1, 1, 64 }, // R16G16B16A16_SINT
    { 1, 1, 64 }, // R16G16B16A16_SFLOAT
    { 1, 1, 32 }, // R32_UINT
    { 1, 1, 32 }, // R32_SINT
    { 1, 1, 32 }, // R32_SFLOAT
    { 1, 1, 64 }, // R32G32_UINT
    { 1, 1, 64 }, // R32G32_SINT
    { 1, 1, 64 }, // R32G32_SFLOAT
    { 1, 1, 96 }, // R32G32B32_UINT
    { 1, 1, 96 }, // R32G32B32_SINT
    { 1, 1, 96 }, // R32G32B32_SFLOAT
    { 1, 1, 128 }, // R32G32B32A32_UINT
    { 1, 1, 128 }, // R32G32B32A32_SINT
    { 1, 1, 128 }, // R32G32B32A32_SFLOAT
    { 1, 1, 64 }, // R64_UINT
    { 1, 1, 64 }, // R64_SINT
    { 1, 1, 64 }, // R64_SFLOAT
    { }, // R64G64_UINT
    { }, // R64G64_SINT
    { }, // R64G64_SFLOAT
    { }, // R64G64B64_UINT
    { }, // R64G64B64_SINT
    { }, // R64G64B64_SFLOAT
    { }, // R64G64B64A64_UINT
    { }, // R64G64B64A64_SINT
    { }, // R64G64B64A64_SFLOAT
    { }, // B10G11R11_UFLOAT_PACK32
    { }, // E5B9G9R9_UFLOAT_PACK32
    { }, // D16_UNORM
    { }, // X8_D24_UNORM_PACK32
    { 1, 1, 32 }, // D32_SFLOAT
    { }, // S8_UINT
    { }, // D16_UNORM_S8_UINT
    { }, // D24_UNORM_S8_UINT
    { }, // D32_SFLOAT_S8_UINT
    { 4, 4, 64 }, // BC1_RGB_UNORM_BLOCK
    { 4, 4, 64 }, // BC1_RGB_SRGB_BLOCK
    { 4, 4, 64 }, // BC1_RGBA_UNORM_BLOCK
    { }, // BC1_RGBA_SRGB_BLOCK
    { 4, 4, 128 }, // BC2_UNORM_BLOCK
    { 4, 4, 128 }, // BC2_SRGB_BLOCK
    { 4, 4, 128 }, // BC3_UNORM_BLOCK
    { 4, 4, 128 }, // BC3_SRGB_BLOCK
    { 4, 4, 64 }, // BC4_UNORM_BLOCK
    { 4, 4, 64 }, // BC4_SNORM_BLOCK
    { 4, 4, 128 }, // BC5_UNORM_BLOCK
    { 4, 4, 128 }, // BC5_SNORM_BLOCK
    { 4, 4, 128 }, // BC6H_UFLOAT_BLOCK
    { 4, 4, 128 }, // BC6H_SFLOAT_BLOCK
    { 4, 4, 128 }, // BC7_UNORM_BLOCK
    { 4, 4, 128 }, // BC7_SRGB_BLOCK
    { }, // ETC2_R8G8B8_UNORM_BLOCK
    { }, // ETC2_R8G8B8_SRGB_BLOCK
    { }, // ETC2_R8G8B8A1_UNORM_BLOCK
    { }, // ETC2_R8G8B8A1_SRGB_BLOCK
    { }, // ETC2_R8G8B8A8_UNORM_BLOCK
    { }, // ETC2_R8G8B8A8_SRGB_BLOCK
    { }, // EAC_R11_UNORM_BLOCK
    { }, // EAC_R11_SNORM_BLOCK
    { }, // EAC_R11G11_UNORM_BLOCK
    { }, // EAC_R11G11_SNORM_BLOCK
    { }, // ASTC_4x4_UNORM_BLOCK
    { }, // ASTC_4x4_SRGB_BLOCK
    { }, // ASTC_5x4_UNORM_BLOCK
    { }, // ASTC_5x4_SRGB_BLOCK
    { }, // ASTC_5x5_UNORM_BLOCK
    { }, // ASTC_5x5_SRGB_BLOCK
    { }, // ASTC_6x5_UNORM_BLOCK
    { }, // ASTC_6x5_SRGB_BLOCK
    { }, // ASTC_6x6_UNORM_BLOCK
    { }, // ASTC_6x6_SRGB_BLOCK
    { }, // ASTC_8x5_UNORM_BLOCK
    { }, // ASTC_8x5_SRGB_BLOCK
    { }, // ASTC_8x6_UNORM_BLOCK
    { }, // ASTC_8x6_SRGB_BLOCK
    { }, // ASTC_8x8_UNORM_BLOCK
    { }, // ASTC_8x8_SRGB_BLOCK
    { }, // ASTC_10x5_UNORM_BLOCK
    { }, // ASTC_10x5_SRGB_BLOCK
    { }, // ASTC_10x6_UNORM_BLOCK
    { }, // ASTC_10x6_SRGB_BLOCK
    { }, // ASTC_10x8_UNORM_BLOCK
    { }, // ASTC_10x8_SRGB_BLOCK
    { }, // ASTC_10x10_UNORM_BLOCK
    { }, // ASTC_10x10_SRGB_BLOCK
    { }, // ASTC_12x10_UNORM_BLOCK
    { }, // ASTC_12x10_SRGB_BLOCK
    { }, // ASTC_12x12_UNORM_BLOCK
    { }, // ASTC_12x12_SRGB_BLOCK
} };

// TODO: mirroring required format support by vulkan but not what d3d12 actually supports..
static inline const std::array<VkFormatProperties, VK_FORMAT_RANGE_SIZE> formats_property{ {
    { 0, 0, 0 }, // UNDEFINED
    { }, // R4G4_UNORM_PACK8
    { }, // R4G4B4A4_UNORM_PACK16
    { }, // B4G4R4A4_UNORM_PACK16
    { }, // R5G6B5_UNORM_PACK16
    { }, // B5G6R5_UNORM_PACK16
    { }, // R5G5B5A1_UNORM_PACK16
    { }, // B5G5R5A1_UNORM_PACK16
    { }, // A1R5G5B5_UNORM_PACK16
    { // R8_UNORM
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    },
    { // R8_SNORM
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    },
    { }, // R8_USCALED
    { }, // R8_SSCALED
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
        VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // R8_UINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
        VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // R8_SINT
    { }, // R8_SRGB
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // R8G8_UNORM
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // R8G8_SNORM
    { }, // R8G8_USCALED
    { }, // R8G8_SSCALED
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
        VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // R8G8_UINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT |
        VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // R8G8_SINT
    { }, // R8G8_SRGB
    { }, // R8G8B8_UNORM
    { }, // R8G8B8_SNORM
    { }, // R8G8B8_USCALED
    { }, // R8G8B8_SSCALED
    { }, // R8G8B8_UINT
    { }, // R8G8B8_SINT
    { }, // R8G8B8_SRGB
    { }, // B8G8R8_UNORM
    { }, // B8G8R8_SNORM
    { }, // B8G8R8_USCALED
    { }, // B8G8R8_SSCALED
    { }, // B8G8R8_UINT
    { }, // B8G8R8_SINT
    { }, // B8G8R8_SRGB
    { // R8G8B8A8_UNORM
        0,
        VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    },
    {
        0,
        VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R8G8B8A8_SNORM
    { }, // R8G8B8A8_USCALED
    { }, // R8G8B8A8_SSCALED
    { }, // R8G8B8A8_UINT
    { }, // R8G8B8A8_SINT
    { // R8G8B8A8_SRGB
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        0,
    },
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // B8G8R8A8_UNORM
    { }, // B8G8R8A8_SNORM
    { }, // B8G8R8A8_USCALED
    { }, // B8G8R8A8_SSCALED
    { }, // B8G8R8A8_UINT
    { }, // B8G8R8A8_SINT
    { }, // B8G8R8A8_SRGB
    { }, // A8B8G8R8_UNORM_PACK32
    { }, // A8B8G8R8_SNORM_PACK32
    { }, // A8B8G8R8_USCALED_PACK32
    { }, // A8B8G8R8_SSCALED_PACK32
    { }, // A8B8G8R8_UINT_PACK32
    { }, // A8B8G8R8_SINT_PACK32
    { }, // A8B8G8R8_SRGB_PACK32
    { }, // A2R10G10B10_UNORM_PACK32
    { }, // A2R10G10B10_SNORM_PACK32
    { }, // A2R10G10B10_USCALED_PACK32
    { }, // A2R10G10B10_SSCALED_PACK32
    { }, // A2R10G10B10_UINT_PACK32
    { }, // A2R10G10B10_SINT_PACK32
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // A2B10G10R10_UNORM_PACK32
    { }, // A2B10G10R10_SNORM_PACK32
    { }, // A2B10G10R10_USCALED_PACK32
    { }, // A2B10G10R10_SSCALED_PACK32
    { }, // A2B10G10R10_UINT_PACK32
    { }, // A2B10G10R10_SINT_PACK32
    {
        0,
        0,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
    }, // R16_UNORM
    { }, // R16_SNORM
    { }, // R16_USCALED
    { }, // R16_SSCALED
    { }, // R16_UINT
    { }, // R16_SINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // R16_SFLOAT
    {
        0,
        0,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
    }, // R16G16_UNORM
    {
        0,
        0,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
    }, // R16G16_SNORM
    { }, // R16G16_USCALED
    { }, // R16G16_SSCALED
    { }, // R16G16_UINT
    { }, // R16G16_SINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT,
    }, // R16G16_SFLOAT
    { }, // R16G16B16_UNORM
    { }, // R16G16B16_SNORM
    { }, // R16G16B16_USCALED
    { }, // R16G16B16_SSCALED
    { }, // R16G16B16_UINT
    { }, // R16G16B16_SINT
    { }, // R16G16B16_SFLOAT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT, // D3D12 specific
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
    }, // R16G16B16A16_UNORM
    {
        0,
        0,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT,
    }, // R16G16B16A16_SNORM
    { }, // R16G16B16A16_USCALED
    { }, // R16G16B16A16_SSCALED
    { }, // R16G16B16A16_UINT
    { }, // R16G16B16A16_SINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT |
        VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R16G16B16A16_SFLOAT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT |
        VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
    }, // R32_UINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT | VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT |
        VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT,
    }, // R32_SINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R32_SFLOAT !!
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R32G32_UINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R32G32_SINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R32G32_SFLOAT
    { }, // R32G32B32_UINT
    { }, // R32G32B32_SINT
    { }, // R32G32B32_SFLOAT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R32G32B32A32_UINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R32G32B32A32_SINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT |
        VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT | VK_FORMAT_FEATURE_BLIT_DST_BIT,
        VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT | VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT | VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT,
    }, // R32G32B32A32_SFLOAT
    { }, // R64_UINT
    { }, // R64_SINT
    { }, // R64_SFLOAT
    { }, // R64G64_UINT
    { }, // R64G64_SINT
    { }, // R64G64_SFLOAT
    { }, // R64G64B64_UINT
    { }, // R64G64B64_SINT
    { }, // R64G64B64_SFLOAT
    { }, // R64G64B64A64_UINT
    { }, // R64G64B64A64_SINT
    { }, // R64G64B64A64_SFLOAT
    { }, // B10G11R11_UFLOAT_PACK32
    { }, // E5B9G9R9_UFLOAT_PACK32
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
        0,
    }, // D16_UNORM
    { }, // X8_D24_UNORM_PACK32
    { // D32_SFLOAT // TODO
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
        0,
    },
    { }, // S8_UINT
    {
        0,
        0,
        0,
    }, // D16_UNORM_S8_UINT
    {
        0,
        VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
        0,
    }, // D24_UNORM_S8_UINT
    {
        0,
        VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT,
        0,
    }, // D32_SFLOAT_S8_UINT
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC1_RGB_UNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC1_RGB_SRGB_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC1_RGBA_UNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC1_RGBA_SRGB_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC2_UNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC2_SRGB_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC3_UNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC3_SRGB_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC4_UNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC4_SNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC5_UNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC5_SNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC6H_UFLOAT_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC6H_SFLOAT_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC7_UNORM_BLOCK
    {
        0,
        VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT | VK_FORMAT_FEATURE_BLIT_SRC_BIT | VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT,
        0,
    }, // BC7_SRGB_BLOCK
    { }, // ETC2_R8G8B8_UNORM_BLOCK
    { }, // ETC2_R8G8B8_SRGB_BLOCK
    { }, // ETC2_R8G8B8A1_UNORM_BLOCK
    { }, // ETC2_R8G8B8A1_SRGB_BLOCK
    { }, // ETC2_R8G8B8A8_UNORM_BLOCK
    { }, // ETC2_R8G8B8A8_SRGB_BLOCK
    { }, // EAC_R11_UNORM_BLOCK
    { }, // EAC_R11_SNORM_BLOCK
    { }, // EAC_R11G11_UNORM_BLOCK
    { }, // EAC_R11G11_SNORM_BLOCK
    { }, // ASTC_4x4_UNORM_BLOCK
    { }, // ASTC_4x4_SRGB_BLOCK
    { }, // ASTC_5x4_UNORM_BLOCK
    { }, // ASTC_5x4_SRGB_BLOCK
    { }, // ASTC_5x5_UNORM_BLOCK
    { }, // ASTC_5x5_SRGB_BLOCK
    { }, // ASTC_6x5_UNORM_BLOCK
    { }, // ASTC_6x5_SRGB_BLOCK
    { }, // ASTC_6x6_UNORM_BLOCK
    { }, // ASTC_6x6_SRGB_BLOCK
    { }, // ASTC_8x5_UNORM_BLOCK
    { }, // ASTC_8x5_SRGB_BLOCK
    { }, // ASTC_8x6_UNORM_BLOCK
    { }, // ASTC_8x6_SRGB_BLOCK
    { }, // ASTC_8x8_UNORM_BLOCK
    { }, // ASTC_8x8_SRGB_BLOCK
    { }, // ASTC_10x5_UNORM_BLOCK
    { }, // ASTC_10x5_SRGB_BLOCK
    { }, // ASTC_10x6_UNORM_BLOCK
    { }, // ASTC_10x6_SRGB_BLOCK
    { }, // ASTC_10x8_UNORM_BLOCK
    { }, // ASTC_10x8_SRGB_BLOCK
    { }, // ASTC_10x10_UNORM_BLOCK
    { }, // ASTC_10x10_SRGB_BLOCK
    { }, // ASTC_12x10_UNORM_BLOCK
    { }, // ASTC_12x10_SRGB_BLOCK
    { }, // ASTC_12x12_UNORM_BLOCK
    { }, // ASTC_12x12_SRGB_BLOCK
} };
